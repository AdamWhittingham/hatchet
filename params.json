{"name":"Hatchet","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'hatchet'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```\r\n$ bundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```\r\n$ gem install hatchet\r\n```\r\n\r\n## Usage\r\n\r\n### Logging\r\n\r\nTo use the logger you must add it to your classes as a mixin or use it to extend\r\nyour modules. Then you can call the logger through the methods `log` and\r\n`logger`. They are aliases for the same method to ease migration.\r\n\r\n```ruby\r\nclass Foo\r\n  include Hatchet\r\n\r\n  def work\r\n    log.info { 'Doing some work' }\r\n  end\r\nend\r\n\r\nmodule Bar\r\n  extend Hatchet\r\n\r\n  def self.work\r\n    log.info { 'Doing some work' }\r\n  end\r\nend\r\n```\r\n\r\n### Configuration\r\n\r\n#### Standard\r\n\r\n```ruby\r\nHatchet.configure do |config|\r\n  # Set the level to use unless overridden (defaults to :info)\r\n  config.level :info\r\n  # Set the level for a specific class/module and its children (can be a string)\r\n  config.level :debug, Namespace::Something::Nested\r\n\r\n  # Add as many appenders as you like, Hatchet comes with one that formats the\r\n  # standard logger in the TTCC style of log4j.\r\n  config.appenders << Hatchet::LoggerAppender.new do |appender|\r\n    # Set the logger that this is wrapping (required)\r\n    appender.logger = Logger.new('log/test.log')\r\n  end\r\nend\r\n```\r\n\r\n#### Sinatra\r\n\r\nUse the standard configuration method but also register Hatchet as a helper\r\nwhere appropriate:\r\n\r\n```ruby\r\nregister Hatchet\r\n```\r\n\r\n#### Rails\r\n\r\nHatchet includes a Railtie that is loaded automatically and wraps the\r\n`Rails.logger`. The Hatchet configuration object is available through\r\n`config.hatchet` within your standard configuration files for fine-tuning your\r\nHatchet configuration.\r\n\r\nTo make it so your log calls are scoped to your controllers you also need to add\r\nHatchet to your `ApplicationController`:\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  include Hatchet\r\nend\r\n```\r\n\r\nYou could include it in your models so that each of those has its own logging\r\ncontext too.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\nAll pull requests should come complete with tests when appropriate and should\r\nfollow the existing style which is best described in\r\n[Github's Ruby style guide](https://github.com/styleguide/ruby/).\r\n\r\n","tagline":"Ruby logging library that provides the ability to add class/module specific filters"}